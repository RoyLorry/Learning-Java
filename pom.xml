<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

  <!--声明项目描述符遵循哪一个POM模型版本。模型本身的版本很少改变，虽然如此，但它仍然是必不可少的，这是为了当Maven引入了新的特性或者其他模型变更的时候，确保稳定性。 -->
  <modelVersion>4.0.0</modelVersion>
  <!--项目的全球唯一标识符，通常使用全限定的包名区分该项目和其他项目。并且构建时生成的路径也是由此生成， 如com.mycompany.app生成的相对路径为：/com/mycompany/app -->
  <groupId>com.java.learning</groupId>
  <!-- 构件的标识符，它和group ID一起唯一标识一个构件。换句话说，你不能有两个不同的项目拥有同样的artifact ID和groupID；在某个 
        特定的group ID下，artifact ID也必须是唯一的。构件是项目产生的或使用的一个东西，Maven为项目产生的构件包括：JARs，源 码，二进制发布和WARs等。 -->
  <artifactId>LearningJava</artifactId>
  <!--项目产生的构件类型，例如jar、war、ear、pom。插件可以创建他们自己的构件类型，所以前面列的不是全部构件类型 -->
  <packaging>jar</packaging>
  <!--项目当前版本，格式为:主版本.次版本.增量版本-限定版本号 -->
  <version>1.0-SNAPSHOT</version>
  <!--项目的名称, Maven产生的文档用 -->
  <name>LearningJava</name>
  <!--项目主页的URL, Maven产生的文档用 -->
  <url>https://github.com/royLorry/learning-java</url>
  <!-- 项目的详细描述, Maven 产生的文档用。 当这个元素能够用HTML格式描述时（例如，CDATA中的文本会被解析器忽略，就可以包含HTML标 
        签）， 不鼓励使用纯文本描述。如果你需要修改产生的web站点的索引页面，你应该修改你自己的索引页文件，而不是调整这里的文档。 -->
  <description>A maven project to study building Java program.</description>

  <!--构建项目需要的信息 -->
  <build>
    <!--使用的插件列表 -->
    <plugins>
      <!--plugin元素包含描述插件所需要的信息。 -->
      <plugin>
        <!--插件在仓库里的group ID -->
        <groupId>org.apache.maven.plugins</groupId>
        <!--插件在仓库里的artifact ID -->
        <artifactId>maven-compiler-plugin</artifactId>
        <!--被使用的插件的版本（或版本范围） -->
        <version>3.6.1</version>
        <!--作为DOM对象的配置 -->
        <configuration>
          <source>1.8</source>
          <target>1.8</target>
          <encoding>UTF-8</encoding>
        </configuration>
      </plugin>
    </plugins>
  </build>

  <!--项目开发者列表 -->
  <developers>
    <!--某个项目开发者的信息 -->
    <developer>
      <!--SCM里项目开发者的唯一标识符 -->
      <id>luorui</id>
      <!--项目开发者的全名 -->
      <name>Roy Luo</name>
      <!--项目开发者的email -->
      <email>r.lorry@hotmail.com</email>
      <!--项目开发者的主页的URL -->
      <url>https://github.com/royLorry</url>
      <!--项目开发者在项目中扮演的角色，角色元素描述了各种角色 -->
      <roles>
        <role>Project Manager</role>
        <role>Architect</role>
        <role>Developer</role>
        <role>Designer</role>
      </roles>
      <!--项目开发者所属组织 -->
      <organization>CYP</organization>
      <!--项目开发者所属组织的URL -->
      <organizationUrl>http://zgsxd.k618.cn/</organizationUrl>
      <!--项目开发者属性，如即时消息如何处理等 -->
      <properties>
        <dept>No</dept>
      </properties>
      <!--项目开发者所在时区， -11到12范围内的整数。 -->
      <timezone>+8</timezone>
    </developer>
  </developers>

  <!--该元素描述了项目相关的所有依赖。 这些依赖组成了项目构建过程中的一个个环节。它们自动从项目定义的仓库中下载。要获取更多信息，请看项目依赖机制。 -->
  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.11</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.google.guava</groupId>
      <artifactId>guava</artifactId>
      <version>27.1-jre</version>
    </dependency>
    <dependency>
      <groupId>org.openjdk.jmh</groupId>
      <artifactId>jmh-core</artifactId>
      <version>0.7.1</version>
    </dependency>
    <dependency>
      <groupId>org.openjdk.jmh</groupId>
      <artifactId>jmh-generator-annprocess</artifactId>
      <version>0.7.1</version>
      <scope>provided</scope>
    </dependency>
  </dependencies>
</project>
